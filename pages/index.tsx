import { useEffect, useState } from 'react';
import Head from 'next/head';
import {
  useAuthSignInWithRedirect,
  useAuthSignOut,
  useAuthUser,
} from '@react-query-firebase/auth';
import { auth } from '../firebase/firebase.config';

// import { useAppSelector, useAppDispatch } from './hooks';
// import {
//   selectCurrentUser,
//   setCurrentUser,
//   UserInterface,
// } from './features/userSlice';

import {
  signInWithGoogle,
  signUserOut,
  onAuthStateChangedListener,
  createUserDocFromAuth,
  addNewData,
  getUserGames,
} from '../firebase/firebase.utils';

export default function Home() {
  // const currentUser = useAppSelector(selectCurrentUser);
  // const dispatch = useAppDispatch();

  // const [currData, setCurrData] = useState([]);

  // useEffect(() => {
  //   const unsubscribe = onAuthStateChangedListener((user: UserInterface) => {
  //     // when a new user signs in call createUserDocFromAuth(),
  //     // otherwise get the current user from firestore and set it to currentUser
  //     if (user) createUserDocFromAuth(user);

  //     const { uid, email, displayName, photoURL } = user;

  //     dispatch(setCurrentUser({ uid, email, displayName, photoURL }));
  //   });

  //   return () => unsubscribe();
  // }, []);

  // useEffect(() => {
  //   async function getData() {
  //     const apiKey = process.env.RAWG_API_KEY;
  //     const data = await fetch(`https://rawg.io/api/games?token&key=${apiKey}`);

  //     const { results } = await data.json();

  //     setCurrData(results);
  //   }

  //   getData();
  // }, []);

  // // eslint-disable-next-line consistent-return
  // useEffect(() => {
  //   if (currentUser.uid) {
  //     const unsub = getUserGames(currentUser?.uid);

  //     return () => unsub();
  //   }
  // }, [currentUser?.uid]);

  const currentUser = useAuthUser(['user'], auth);

  if (currentUser.isLoading) {
    return <div />;
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {currentUser.data && <div>Welcome {currentUser.data.displayName}!</div>}

        <h1 className="text-3xl font-bold underline">Hello world!</h1>

        <button type="button" onClick={signInWithGoogle}>
          Sign In
        </button>
        <br />
        <button type="button" onClick={signUserOut}>
          Sign Out
        </button>

        {/* {currentUser && (
          <>
            <h1>{currentUser?.email}</h1>
            <button
              type="button"
              onClick={() => addNewData(currentUser.uid, currData[0]?.name)}
            >
              Add new data
            </button>
          </>
        )} */}
      </main>
    </div>
  );
}
